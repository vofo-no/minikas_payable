# frozen_string_literal: true

require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe MinikasPayable::TransfersController, type: :controller do
  routes { MinikasPayable::Engine.routes }
  let(:payer) { create :dummy_payer }
  let(:transfer) { create :transfer, payable: payer }

  before :each do
    module MockScope
      def policy_scope(scoped)
        scoped.all
      end
    end

    controller.class.include MockScope
  end

  describe "DELETE #destroy" do
    it "destroys the requested transfer" do
      transfer.persisted? # ensure created
      expect {
        delete :destroy, params: { id: transfer.to_param }
      }.to change(MinikasPayable::Transfer, :count).by(-1)
    end

    it "redirects to the course" do
      delete :destroy, params: { id: transfer.to_param }
      expect(response).to redirect_to("/dummy_payer/#{transfer.payable.id}")
    end

    context "with closed batch" do
      before do
        transfer.batch.update!(closed: true)
      end

      it "does not destroy the requested transfer" do
        expect {
          delete :destroy, params: { id: transfer.to_param }
        }.not_to change(MinikasPayable::Transfer, :count)
      end

      it "redirects to back" do
        request.env["HTTP_REFERER"] = "where_i_came_from"
        delete :destroy, params: { id: transfer.to_param }
        expect(response).to redirect_to("where_i_came_from")
      end

      it "fallback to main_app.root" do
        delete :destroy, params: { id: transfer.to_param }
        expect(response).to redirect_to("/")
      end
    end
  end
end
